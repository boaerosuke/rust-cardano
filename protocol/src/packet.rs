extern crate wallet_crypto;

//use std::collections::{BTreeMap};
// use self::wallet_crypto::cbor::{encode_to_cbor, Value, ObjectKey, Bytes};

pub fn send_handshake(_protocol_magic: u32) -> Vec<u8> {
/*
    let mut inSpecs = BTreeMap::new();
    let mut outSpecs = BTreeMap::new();

    let inHandlers = [ (4u64, b"05") ];
    let outHandlers = [ (4u64, b"05") ];

    for (k,bs) in inHandlers.iter() {
        let b = Bytes::from_slice(&bs[..]);
        inSpecs.insert(ObjectKey::Integer(*k), Value::Array(vec![ Value::U64(0), Value::Tag(24, Box::new(Value::Bytes(b)))]));
    }

    for (k,bs) in outHandlers.iter() {
        let b = Bytes::from_slice(&bs[..]);
        outSpecs.insert(ObjectKey::Integer(*k), Value::Array(vec![ Value::U64(0), Value::Tag(24, Box::new(Value::Bytes(b)))]));
    }

    let content = vec![ Value::U64(protocol_magic as u64)
                      , Value::Array(vec![Value::U64(0), Value::U64(1), Value::U64(0)])
                      , Value::Object(inSpecs)
                      , Value::Object(outSpecs)
                      ];
    encode_to_cbor(&Value::Array(content)).unwrap()
*/
    vec![
        0x84, 0x1a, 0x2d, 0x96, 0x4a, 0x09, 0x83, 0x00
      , 0x01, 0x00, 0xb3, 0x04, 0x82, 0x00, 0xd8, 0x18, 0x41, 0x05, 0x05, 0x82, 0x00, 0xd8, 0x18, 0x41
      , 0x04, 0x06, 0x82, 0x00, 0xd8, 0x18, 0x41, 0x07, 0x18, 0x22, 0x82, 0x00, 0xd8, 0x18, 0x42, 0x18
      , 0x5e, 0x18, 0x25, 0x82, 0x00, 0xd8, 0x18, 0x42, 0x18, 0x5e, 0x18, 0x2b, 0x82, 0x00, 0xd8, 0x18
      , 0x42, 0x18, 0x5d, 0x18, 0x31, 0x82, 0x00, 0xd8, 0x18, 0x42, 0x18, 0x5c, 0x18, 0x37, 0x82, 0x00
      , 0xd8, 0x18, 0x42, 0x18, 0x62, 0x18, 0x3d, 0x82, 0x00, 0xd8, 0x18, 0x42, 0x18, 0x61, 0x18, 0x43
      , 0x82, 0x00, 0xd8, 0x18, 0x42, 0x18, 0x60, 0x18, 0x49, 0x82, 0x00, 0xd8, 0x18, 0x42, 0x18, 0x5f
      , 0x18, 0x53, 0x82, 0x00, 0xd8, 0x18, 0x41, 0x00, 0x18, 0x5c, 0x82, 0x00, 0xd8, 0x18, 0x42, 0x18
      , 0x31, 0x18, 0x5d, 0x82, 0x00, 0xd8, 0x18, 0x42, 0x18, 0x2b, 0x18, 0x5e, 0x82, 0x00, 0xd8, 0x18
      , 0x42, 0x18, 0x25, 0x18, 0x5f, 0x82, 0x00, 0xd8, 0x18, 0x42, 0x18, 0x49, 0x18, 0x60, 0x82, 0x00
      , 0xd8, 0x18, 0x42, 0x18, 0x43, 0x18, 0x61, 0x82, 0x00, 0xd8, 0x18, 0x42, 0x18, 0x3d, 0x18, 0x62
      , 0x82, 0x00, 0xd8, 0x18, 0x42, 0x18, 0x37, 0xad, 0x04, 0x82, 0x00, 0xd8, 0x18, 0x41, 0x05, 0x05
      , 0x82, 0x00, 0xd8, 0x18, 0x41, 0x04, 0x06, 0x82, 0x00, 0xd8, 0x18, 0x41, 0x07, 0x0d, 0x82, 0x00
      , 0xd8, 0x18, 0x41, 0x00, 0x0e, 0x82, 0x00, 0xd8, 0x18, 0x41, 0x00, 0x18, 0x25, 0x82, 0x00, 0xd8
      , 0x18, 0x42, 0x18, 0x5e, 0x18, 0x2b, 0x82, 0x00, 0xd8, 0x18, 0x42, 0x18, 0x5d, 0x18, 0x31, 0x82
      , 0x00, 0xd8, 0x18, 0x42, 0x18, 0x5c, 0x18, 0x37, 0x82, 0x00, 0xd8, 0x18, 0x42, 0x18, 0x62, 0x18
      , 0x3d, 0x82, 0x00, 0xd8, 0x18, 0x42, 0x18, 0x61, 0x18, 0x43, 0x82, 0x00, 0xd8, 0x18, 0x42, 0x18
      , 0x60, 0x18, 0x49, 0x82, 0x00, 0xd8, 0x18, 0x42, 0x18, 0x5f, 0x18, 0x53, 0x82, 0x00, 0xd8, 0x18
      , 0x41, 0x00
    ]
}

pub fn send_hardcoded_blob_after_handshake() -> Vec<u8> {
    vec![
        0x53, 0x78, 0x29, 0x6e, 0xc5, 0xd4, 0x5c, 0x95, 0x24
    ]
}
